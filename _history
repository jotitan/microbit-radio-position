{"entries":[{"timestamp":1742241079818,"editorVersion":"7.0.57","changes":[{"type":"edited","filename":"main.ts","patch":[{"diffs":[[-1,"// Two cases : bound for position or client who searching position\n\n"],[0,"\n"]],"start1":0,"start2":0,"length1":69,"length2":1}]},{"type":"edited","filename":"pxt.json","patch":[{"diffs":[[0,"pt-only\""],[1,",\n    \"additionalFilePaths\": []"],[0,"\n}\n"]],"start1":282,"start2":282,"length1":11,"length2":42}]}]},{"timestamp":1742241112823,"editorVersion":"7.0.57","changes":[{"type":"edited","filename":"main.ts","patch":[{"diffs":[[0,"n\n\n\n"],[-1,"class Configuration {\n    constructor(private group: number = 0, private crossRoadKind: CrossRoadKind = CrossRoadKind.Line) {\n        new GroupConfig((group: number) => this.showCrossroadTypeConfig(group));\n    }\n    showCrossroadTypeConfig(group: number) {\n        this.group = group;\n        new KindConfig((kind: CrossRoadKind) => this.showCrossroadPosition(kind));\n    }\n    showCrossroadPosition(kind: CrossRoadKind) {\n        this.crossRoadKind = kind;\n        new PositionConfig((position: CrossRoadPosition) => this.complete(position), 'A')\n    }\n    complete(position: CrossRoadPosition) {\n        new LightManager(this.group, this.crossRoadKind, position)\n    }\n}\n"]],"start1":65,"start2":65,"length1":678,"length2":4}]}]},{"timestamp":1742244825627,"editorVersion":"7.0.57","changes":[{"type":"edited","filename":"main.ts","patch":[{"diffs":[[0,"}\n}\n"],[-1,"// Choose group crossroad, crossroad type, then position\nclass GroupConfig {\n    constructor(next: (group: number) => void, private group: number = 0) {\n        input.onButtonPressed(Button.A, () => this.increaseGroupNumber());\n        input.onButtonPressed(Button.B, () => next(this.group));\n        this.show();\n    }\n    increaseGroupNumber() {\n        this.group = (this.group + 1) % 10;\n        this.show();\n    }\n    show() {\n        basic.showNumber(this.group)\n    }\n}\n"]],"start1":739,"start2":739,"length1":481,"length2":4}]}]},{"timestamp":1742244995260,"editorVersion":"7.0.57","changes":[{"type":"edited","filename":"main.ts","patch":[{"diffs":[[0,") {\n        new "],[-1,"Kind"],[1,"Group"],[0,"Config((group: n"]],"start1":191,"start2":191,"length1":36,"length2":37},{"diffs":[[0,"    }\n}\n"],[-1,"\n"],[0,"// Choos"]],"start1":735,"start2":735,"length1":17,"length2":16},{"diffs":[[0,"n\nclass "],[-1,"Kind"],[1,"Group"],[0,"Config {"]],"start1":798,"start2":798,"length1":20,"length2":21},{"diffs":[[0,"t: ("],[-1,"isBoudary: boolean"],[1,"group: number"],[0,") =>"]],"start1":839,"start2":839,"length1":26,"length2":21},{"diffs":[[0,"ate "],[-1,"isBoundary: boolean = true"],[1,"group: number = 0"],[0,") {\n"]],"start1":871,"start2":871,"length1":34,"length2":25},{"diffs":[[0,"=> this."],[-1,"changeKind"],[1,"increaseGroupNumber"],[0,"());\n   "]],"start1":939,"start2":939,"length1":26,"length2":35},{"diffs":[[0,"xt(this."],[-1,"isBoundary"],[1,"group"],[0,"));\n    "]],"start1":1019,"start2":1019,"length1":26,"length2":21},{"diffs":[[0,"    "],[-1,"changeKind"],[1,"increaseGroupNumber"],[0,"() {"]],"start1":1063,"start2":1063,"length1":18,"length2":27},{"diffs":[[0,"his."],[-1,"isBoundary = !"],[1,"group = ("],[0,"this."],[-1,"isBoundary"],[1,"group + 1) % 10"],[0,";\n  "]],"start1":1100,"start2":1100,"length1":37,"length2":37},{"diffs":[[0,"    "],[-1,"if(this.isBoundary){\n            basic.showIcon(IconNames.Square)\n        }else{\n            basic.clearScreen()\n            led.plot(2,2)\n        }"],[1,"basic.showNumber(this.group)"],[0,"\n   "]],"start1":1179,"start2":1179,"length1":156,"length2":36}]}]},{"timestamp":1742245176225,"editorVersion":"7.0.57","changes":[{"type":"edited","filename":"main.ts","patch":[{"diffs":[[0,"his."],[-1,"finish"],[1,"showCrossroadTypeConfig"],[0,"(gro"]],"start1":238,"start2":238,"length1":14,"length2":31}]}]},{"timestamp":1742246286288,"editorVersion":"7.0.57","changes":[{"type":"edited","filename":"main.ts","patch":[{"diffs":[[0,"s.finish"],[-1,"Con"],[0,"(group))"]],"start1":240,"start2":240,"length1":19,"length2":16}]}]},{"timestamp":1742246288773,"editorVersion":"7.0.57","changes":[{"type":"edited","filename":"main.ts","patch":[{"diffs":[[0,"on\n\n"],[-1,"function ConfigureBoundary(position: number){\n\n}\n\nclass Configuration {\n    constructor(private isBoundary: boolean = true) {\n        new KindConfig((isBoundary: boolean) => this.finishConfig(isBoundary));\n    }\n    finishConfig(isBoundary: boolean) {\n        this.isBoundary = isBoundary;\n        if(this.isBoundary){\n            new ChooseBoundaryPosition((position: number) => ConfigureBoundary(position));\n        }\n        "],[1,"\nclass Configuration {\n    constructor(private group: number = 0, private crossRoadKind: CrossRoadKind = CrossRoadKind.Line) {\n        new KindConfig((group: number) => this.finishCon(group));\n    }\n    showCrossroadTypeConfig(group: number) {\n        this.group = group;\n        new KindConfig((kind: CrossRoadKind) => this.showCrossroadPosition(kind));"],[0,"\n   "]],"start1":64,"start2":64,"length1":436,"length2":362},{"diffs":[[0,"n)\n    }\n}\n\n"],[1,"// Choose group crossroad, crossroad type, then position\n"],[0,"class KindCo"]],"start1":717,"start2":717,"length1":24,"length2":81},{"diffs":[[0,"}\n}\n"],[-1,"\nclass ChooseBoundaryPosition {\n    constructor(next: (position: number) => void, private position: number= 0) {\n        input.onButtonPressed(Button.A, () => this.changePosition());\n        input.onButtonPressed(Button.B, () => next(this.position));\n        this.show();\n    }\n    changePosition() {\n        this.position = (this.position+1)%4;\n        this.show();\n    }\n    show() {\n        if (this.isBoundary) {\n            basic.showIcon(IconNames.Square)\n        } else {\n            basic.clearScreen()\n            led.plot(2, 2)\n        }\n    }\n}\n"]],"start1":1322,"start2":1322,"length1":560,"length2":4}]}]},{"timestamp":1742246670434,"editorVersion":"7.0.57","changes":[{"type":"edited","filename":"main.ts","patch":[{"diffs":[[0,") {\n        "],[1,"if (this.isBoundary) {\n            basic.showIcon(IconNames.Square)\n        } else {\n            basic.clearScreen()\n            led.plot(2, 2)\n        }"],[0,"\n    }\n}\n"]],"start1":1725,"start2":1725,"length1":21,"length2":174}]}]},{"timestamp":1742247018091,"editorVersion":"7.0.57","changes":[{"type":"edited","filename":"main.ts","patch":[{"diffs":[[0,"        "],[-1,"l"],[0,"\n    }\n}"]],"start1":1729,"start2":1729,"length1":17,"length2":16}]}]},{"timestamp":1742247691670,"editorVersion":"7.0.57","changes":[{"type":"edited","filename":"main.ts","patch":[{"diffs":[[0,"       l"],[-1,"e"],[0,"\n    }\n}"]],"start1":1730,"start2":1730,"length1":17,"length2":16}]}]},{"timestamp":1742247692603,"editorVersion":"7.0.57","changes":[{"type":"edited","filename":"main.ts","patch":[{"diffs":[[0,"      le"],[-1,"d.plot"],[0,"\n    }\n}"]],"start1":1731,"start2":1731,"length1":22,"length2":16}]}]},{"timestamp":1742247749834,"editorVersion":"7.0.57","changes":[{"type":"edited","filename":"main.ts","patch":[{"diffs":[[0,"ed.plot\n    }\n}\n"],[-1,"\n"]],"start1":1738,"start2":1738,"length1":17,"length2":16}]}]},{"timestamp":1742249724650,"editorVersion":"7.0.57","changes":[{"type":"edited","filename":"main.ts","patch":[{"diffs":[[0,"   }\n}\n\n"],[-1,"fun"]],"start1":1747,"start2":1747,"length1":11,"length2":8}]}]},{"timestamp":1742249727880,"editorVersion":"7.0.57","changes":[{"type":"edited","filename":"main.ts","patch":[{"diffs":[[0,"\n}\n\n"],[-1,"function ConfigureClient(){\n\n}\n\n"],[0,"clas"]],"start1":114,"start2":114,"length1":40,"length2":8},{"diffs":[[0,"   }"],[-1,"else{\n            ConfigureClient();\n        }   "],[1,"\n        \n    }\n    showCrossroadPosition(kind: CrossRoadKind) {\n        this.crossRoadKind = kind;\n        new PositionConfig((position: CrossRoadPosition) => this.complete(position), 'A')\n    }\n    complete(position: CrossRoadPosition) {\n        new LightManager(this.group, this.crossRoadKind, position)"],[0,"\n   "]],"start1":483,"start2":483,"length1":57,"length2":314},{"diffs":[[0,"    "],[-1,"switch(this.position){\n            case 0: showBlock(0,0);break;\n            case 1: showBlock(3, 0); break;\n            case 2: showBlock(3, 3); break;\n            case 3: showBlock(0, 3); break;\n        }\n    }\n}\n\nfunction showBlock(x:number, y:number){\n    led.plot(x,y)\n    led.plot(x, y+1)\n    led.plot(x+1, y)\n    led.plot(x + 1, y+1)\n}"],[1,"led.plot\n    }\n}\n\nfun"]],"start1":1733,"start2":1733,"length1":346,"length2":25}]}]},{"timestamp":1742250138443,"editorVersion":"7.0.57","changes":[{"type":"edited","filename":"main.ts","patch":[{"diffs":[[0,"r){\n"],[-1,"    radio.setGroup(1);\n    radio.onReceivedString(msg => {\n        radio.receivedPacket()\n    })"],[0,"\n}\n\n"]],"start1":110,"start2":110,"length1":104,"length2":8},{"diffs":[[0,") {\n"],[-1,"        basic.clearScreen();\n"],[0,"    "]],"start1":1500,"start2":1500,"length1":37,"length2":8},{"diffs":[[0,"1)\n}"],[-1,"\n\nnew Configuration()"]],"start1":1850,"start2":1850,"length1":25,"length2":4}]}]},{"timestamp":1742251175991,"editorVersion":"7.0.57","changes":[{"type":"edited","filename":"main.ts","patch":[{"diffs":[[0,"dPacket("],[-1,"0"],[0,")\n    })"]],"start1":194,"start2":194,"length1":17,"length2":16}]}]},{"timestamp":1742251176666,"editorVersion":"7.0.57","changes":[{"type":"edited","filename":"main.ts","patch":[{"diffs":[[0,"> {\n        "],[-1,"console.log("],[0,"radio.receiv"]],"start1":169,"start2":169,"length1":36,"length2":24},{"diffs":[[0,"t(0)"],[-1,")\n        console.log(radio.receivedPacket(1))\n        console.log(radio.receivedPacket(2))\n    })\n}\n\nfunction ConfigureClient(){\n    radio.setGroup(1)\n    input.onButtonPressed(Button.A,()=> {\n        radio.sendString(\"value\")\n    });\n    \n    radio.onReceivedString(msg => {\n        console.log(`Message ${msg}`)\n    })"],[1,"\n    })\n}\n\nfunction ConfigureClient(){\n"],[0,"\n}\n\n"]],"start1":200,"start2":200,"length1":329,"length2":47}]}]},{"timestamp":1742251612563,"editorVersion":"7.0.57","changes":[{"type":"edited","filename":"main.ts","patch":[{"diffs":[[0,"    "],[-1,"basic.clearScreen()\n    radio.setGroup(1);\n    input.onButtonPressed(Button.A,()=>{})\n    input.onButtonPressed(Button.B, () => { })"],[1,"radio.setGroup(1);"],[0,"\n   "]],"start1":114,"start2":114,"length1":140,"length2":26},{"diffs":[[0,"2))\n"],[-1,"        console.log(radio.receivedPacket(3))\n        radio.sendString(\"bonjour\")\n        basic.showIcon(IconNames.SmallSquare)\n        basic.showIcon(IconNames.Square)\n        basic.showIcon(IconNames.SmallSquare)\n        basic.pause(300)\n        basic.clearScreen()\n"],[0,"    "]],"start1":304,"start2":304,"length1":275,"length2":8},{"diffs":[[0,"    });\n"],[1,"    "],[0,"\n"],[-1,""],[0,"    radi"]],"start1":444,"start2":444,"length1":17,"length2":21},{"diffs":[[0,"String(msg => {\n"],[1,""],[0,"        console."]],"start1":477,"start2":477,"length1":32,"length2":32},{"diffs":[[0,"}`)\n"],[-1,"        console.log(`Response ${radio.receivedPacket(1)}`)\n"],[0,"    "]],"start1":527,"start2":527,"length1":67,"length2":8}]}]},{"timestamp":1742252200360,"editorVersion":"7.0.57","changes":[{"type":"edited","filename":"main.ts","patch":[{"diffs":[[0,"(1)\n"],[-1,"    radio.s\n"],[0,"    "]],"start1":745,"start2":745,"length1":20,"length2":8}]}]},{"timestamp":1742252811863,"editorVersion":"7.0.57","changes":[{"type":"edited","filename":"main.ts","patch":[{"diffs":[[0," radio.s"],[-1,"e"],[0,"\n    inp"]],"start1":752,"start2":752,"length1":17,"length2":16}]}]},{"timestamp":1742252813697,"editorVersion":"7.0.57","changes":[{"type":"edited","filename":"main.ts","patch":[{"diffs":[[0,"1);\n"],[-1,"    radio.setTransmitSerialNumber(true)\n"],[0,"    "]],"start1":157,"start2":157,"length1":48,"length2":8},{"diffs":[[0,"()=>{})\n"],[1,""],[0,"    inpu"]],"start1":196,"start2":196,"length1":16,"length2":16},{"diffs":[[0,"cons"],[-1,"t id = radio.receivedPacket(1);"],[1,"ole.log(radio.receivedPacket(0))\n        console.log(radio.receivedPacket(1))\n        console.log(radio.receivedPacket(2))\n        console.log(radio.receivedPacket(3))"],[0,"\n   "]],"start1":295,"start2":295,"length1":39,"length2":175},{"diffs":[[0,"ing("],[-1,"`ACK:${id}`"],[1,"\"bonjour\""],[0,")\n  "]],"start1":488,"start2":488,"length1":19,"length2":17},{"diffs":[[0,"o.se"],[-1,"tTransmitSerialNumber(true)"],[0,"\n   "]],"start1":757,"start2":757,"length1":35,"length2":8},{"diffs":[[0,"   });\n\n"],[1,""],[0,"    radi"]],"start1":839,"start2":839,"length1":16,"length2":16},{"diffs":[[0,"> {\n"],[-1,"        \n"],[0,"    "]],"start1":879,"start2":879,"length1":17,"length2":8}]}]},{"timestamp":1742253380793,"editorVersion":"7.0.57","changes":[{"type":"edited","filename":"main.ts","patch":[{"diffs":[[0,"ue)\n"],[-1,"    let strengths = [0,0,0,0]\n"],[0,"    "]],"start1":691,"start2":691,"length1":38,"length2":8},{"diffs":[[0,"> {\n"],[-1,"        strengths = [0, 0, 0, 0]\n"],[0,"    "]],"start1":733,"start2":733,"length1":41,"length2":8},{"diffs":[[0,"    "],[-1,"if(msg.indexOf(\"ACK:\") === 0){\n "],[1,"\n"],[0,"        "],[-1,"   "],[0,"cons"],[-1,"t id = parseInt(msg.split(\":\")[1])\n            if (id !== control.deviceSerialNumber()){\n                return;\n            }\n        }\n        const signal = "],[1,"ole.log(`Message ${msg}`)\n        console.log(`Response ${"],[0,"radi"]],"start1":820,"start2":820,"length1":215,"length2":79},{"diffs":[[0,"ket("],[-1,"2) + 128"],[1,"1)}`)"],[0,"\n   "]],"start1":912,"start2":912,"length1":16,"length2":13}]}]},{"timestamp":1742253612372,"editorVersion":"7.0.57","changes":[{"type":"edited","filename":"main.ts","patch":[{"diffs":[[0,"{id}"],[-1,":${position}"],[0,"`)\n "]],"start1":402,"start2":402,"length1":20,"length2":8},{"diffs":[[0,"nst "],[-1,"position = parseInt(msg.split(\":\")[2])\n        const signal = radio.receivedPacket(2) + 128\n        strengths[position] = signal;\n        if(!strengths.some(v=>v===0)){\n            //show graphic\n        }"],[1,"signal = radio.receivedPacket(2) + 128"],[0,"\n   "]],"start1":1081,"start2":1081,"length1":213,"length2":46}]}]},{"timestamp":1742254097949,"editorVersion":"7.0.57","changes":[{"type":"edited","filename":"main.ts","patch":[{"diffs":[[0,"128\n"],[-1,"        \n"],[0,"    "]],"start1":1185,"start2":1185,"length1":17,"length2":8}]}]},{"timestamp":1742372946987,"editorVersion":"7.0.57","changes":[{"type":"edited","filename":"main.ts","patch":[{"diffs":[[0,"        "],[-1,"led"],[0,"\n       "]],"start1":1189,"start2":1189,"length1":19,"length2":16}]}]},{"timestamp":1742372948558,"editorVersion":"7.0.57","changes":[{"type":"edited","filename":"main.ts","patch":[{"diffs":[[0,"    "],[-1,"basic.showNumber(signal)"],[1,"led"],[0,"\n   "]],"start1":1193,"start2":1193,"length1":32,"length2":11}]}]},{"timestamp":1742372959340,"editorVersion":"7.0.57","changes":[{"type":"edited","filename":"main.ts","patch":[{"diffs":[[0,"ue)\n"],[-1,"    \n"],[0,"    "]],"start1":703,"start2":703,"length1":13,"length2":8}]}]},{"timestamp":1742389803595,"editorVersion":"7.0.57","changes":[{"type":"edited","filename":"main.ts","patch":[{"diffs":[[0,"ue)\n    "],[-1,"b"],[0,"\n    let"]],"start1":703,"start2":703,"length1":17,"length2":16}]}]},{"timestamp":1742389804848,"editorVersion":"7.0.57","changes":[{"type":"edited","filename":"main.ts","patch":[{"diffs":[[0,"1);\n"],[-1,"    led.setBrightness(255)\n"],[0,"    "]],"start1":157,"start2":157,"length1":35,"length2":8},{"diffs":[[0,"ue)\n"],[-1,"    \n    let transmitPower = 6;\n"],[0,"    "]],"start1":197,"start2":197,"length1":40,"length2":8},{"diffs":[[0,")=>{"],[-1,"\n        transmitPower = (transmitPower+1)%8\n        radio.setTransmitPower(transmitPower)\n        basic.showNumber(transmitPower)\n    "],[0,"})\n "]],"start1":237,"start2":237,"length1":143,"length2":8},{"diffs":[[0,"    "],[-1,"led.setBrightness(255)"],[1,"b"],[0,"\n   "]],"start1":707,"start2":707,"length1":30,"length2":9}]}]},{"timestamp":1742389899114,"editorVersion":"7.0.57","changes":[{"type":"edited","filename":"main.ts","patch":[{"diffs":[[0,"           case "],[-1,"2"],[1,"3"],[0,": showBlock(0, 3"]],"start1":3112,"start2":3112,"length1":33,"length2":33}]}]},{"timestamp":1742390685950,"editorVersion":"7.0.57","changes":[{"type":"edited","filename":"main.ts","patch":[{"diffs":[[0,"        "],[-1,"//"],[0,"case 2: "]],"start1":3071,"start2":3071,"length1":18,"length2":16}]}]},{"timestamp":1742390687180,"editorVersion":"7.0.57","changes":[{"type":"edited","filename":"main.ts","patch":[{"diffs":[[0,"\n}\n\n"],[-1,"function computePosition(){\n    basic.showIcon(IconNames.Rollerskate)\n    const longDistance = Math.sqrt(2) * 4\n    // Transform power to relative distance. 100 is distance 0, 50 is half, 20 is long (arbiatrary)\n    const dA = \n    // Resolve equation\n\n}\n\n"],[0,"func"]],"start1":807,"start2":807,"length1":264,"length2":8},{"diffs":[[0,"tion+1)%"],[-1,"3"],[1,"4"],[0,";\n      "]],"start1":2870,"start2":2870,"length1":17,"length2":17}]}]},{"timestamp":1742390813440,"editorVersion":"7.0.57","changes":[{"type":"edited","filename":"main.ts","patch":[{"diffs":[[0,"atrary)\n"],[-1,"    \n"],[0,"    cons"]],"start1":1015,"start2":1015,"length1":21,"length2":16}]}]},{"timestamp":1742418630284,"editorVersion":"7.0.57","changes":[{"type":"edited","filename":"main.ts","patch":[{"diffs":[[0,"    "],[-1,"// A"],[0,"\n   "]],"start1":1023,"start2":1023,"length1":12,"length2":8}]}]},{"timestamp":1742418633768,"editorVersion":"7.0.57","changes":[{"type":"edited","filename":"main.ts","patch":[{"diffs":[[0,"ion("],[-1,"strengths: number[]"],[0,"){\n "]],"start1":832,"start2":832,"length1":27,"length2":8},{"diffs":[[0,"// A"],[-1,"ffine function y = x (-√2/20) + 5√2\n    const dA = strengths[0] * (Math.sqrt(2)/-20) + 5 * Math.sqrt(2)"],[1,"\n    const dA = "],[0,"\n   "]],"start1":1027,"start2":1027,"length1":111,"length2":24}]}]},{"timestamp":1742418811013,"editorVersion":"7.0.57","changes":[{"type":"edited","filename":"main.ts","patch":[{"diffs":[[0,"  })\n}\n\n"],[-1,"\n\n"],[0,"function"]],"start1":803,"start2":803,"length1":18,"length2":16}]}]},{"timestamp":1742427040459,"editorVersion":"7.0.57","changes":[{"type":"edited","filename":"main.ts","patch":[{"diffs":[[0,"  })\n}\n\n"],[-1,"functio"],[0,"\n\nfuncti"]],"start1":803,"start2":803,"length1":23,"length2":16}]}]},{"timestamp":1742427050631,"editorVersion":"7.0.57","changes":[{"type":"edited","filename":"main.ts","patch":[{"diffs":[[0,"ctio"],[-1,"n transformPower(value: number):number{\n    // Affine function y = x (-√2/20) + 5√2\n    return value * (Math.sqrt(2) / -20) + 5 * Math.sqrt(2);\n}"],[0,"\n\nfu"]],"start1":814,"start2":814,"length1":153,"length2":8},{"diffs":[[0,"    "],[-1,"const dA = transformPower(strengths[0]);\n    const dB = transformPower(strengths[1]);"],[1,"// Affine function y = x (-√2/20) + 5√2"],[0,"\n   "]],"start1":1051,"start2":1051,"length1":93,"length2":47},{"diffs":[[0,"st d"],[-1,"C = transformPower(strengths[2]);\n    // Resolve equation\n    const y = Math.sqrt(dA*dA - Math.pow((dA*dA - dB*dB + 16)/8,2))\n    const x = Math.sqrt(dA*dA - y*y)\n    basic.clearScreen()\n    led.plot(x,y)"],[1,"A = strengths[0] * (Math.sqrt(2)/-20) + 5 * Math.sqrt(2)\n    // Resolve equation\n"],[0,"\n}\n\n"]],"start1":1102,"start2":1102,"length1":212,"length2":89},{"diffs":[[0,"= [0,0,0"],[1,",0"],[0,"]\n    in"]],"start1":1326,"start2":1326,"length1":16,"length2":18},{"diffs":[[0,"= [0, 0,"],[1," 0,"],[0," 0]\n    "]],"start1":1398,"start2":1398,"length1":16,"length2":19},{"diffs":[[0,"    "],[-1,"computePosition(strengths);"],[1,"//show graphic"],[0,"\n   "]],"start1":1908,"start2":1908,"length1":35,"length2":22}]}]},{"timestamp":1742427357548,"editorVersion":"7.0.57","changes":[{"type":"edited","filename":"main.ts","patch":[{"diffs":[[0,"ng(\""],[-1,"REQ"],[1,"value"],[0,"\")\n "]],"start1":1744,"start2":1744,"length1":11,"length2":13}]}]},{"timestamp":1742477236958,"editorVersion":"7.0.57","changes":[{"type":"edited","filename":"main.ts","patch":[{"diffs":[[0,"> {\n"],[-1,"        if(message )\n"],[0,"    "]],"start1":517,"start2":517,"length1":29,"length2":8}]}]},{"timestamp":1742477242839,"editorVersion":"7.0.57","changes":[{"type":"edited","filename":"main.ts","patch":[{"diffs":[[0,"if(m"],[-1,"sg !== \"REQ\"){\n            return;\n        }"],[1,"essage )"],[0,"\n   "]],"start1":529,"start2":529,"length1":52,"length2":16},{"diffs":[[0,"55)\n"],[-1,"    basic.clearScreen()\n"],[0,"    "]],"start1":1639,"start2":1639,"length1":32,"length2":8},{"diffs":[[0,")){\n"],[-1,"               basic.showIcon(IconNames.Skull)\n"],[0,"    "]],"start1":1960,"start2":1960,"length1":55,"length2":8},{"diffs":[[0,"           }"],[-1,"   "],[0,"\n        }el"]],"start1":1989,"start2":1989,"length1":27,"length2":24},{"diffs":[[0,"   }"],[-1,"else{\n            return;\n        }\n        basic.showIcon(IconNames.Cow)"],[0,"\n   "]],"start1":2007,"start2":2007,"length1":81,"length2":8},{"diffs":[[0,"        "],[-1,"//"],[0,"basic.sh"]],"start1":2118,"start2":2118,"length1":18,"length2":16},{"diffs":[[0,"al;\n"],[-1,"        basic.showNumber(strengths.filter(v => v !== 0).length)\n"],[0,"    "]],"start1":2185,"start2":2185,"length1":72,"length2":8}]}]},{"timestamp":1742477793563,"editorVersion":"7.0.57","changes":[{"type":"edited","filename":"main.ts","patch":[{"diffs":[[0,",0]\n"],[-1,"    let count = 0\n"],[0,"    "]],"start1":1727,"start2":1727,"length1":26,"length2":8},{"diffs":[[0," 0]\n"],[-1,"        //basic.clearScreen()\n        \n        \n"],[0,"    "]],"start1":1799,"start2":1799,"length1":56,"length2":8},{"diffs":[[0,"> {\n"],[-1,"        count++\n        basic.showNumber(count)\n        return\n        led.plot(1,1)\n"],[0,"    "]],"start1":1876,"start2":1876,"length1":93,"length2":8},{"diffs":[[0,"lNumber()){\n"],[1,"               basic.showIcon(IconNames.Skull)\n"],[0,"            "]],"start1":2012,"start2":2012,"length1":24,"length2":71}]}]},{"timestamp":1742478715403,"editorVersion":"7.0.57","changes":[{"type":"edited","filename":"main.ts","patch":[{"diffs":[[0,"(1)\n"],[-1,"    radio.c\n"],[0,"    "]],"start1":1608,"start2":1608,"length1":20,"length2":8}]}]},{"timestamp":1742480942045,"editorVersion":"7.0.57","changes":[{"type":"edited","filename":"main.ts","patch":[{"diffs":[[0,"roup(1)\n    "],[1,"radio.c"],[0,"\n    radio.s"]],"start1":1604,"start2":1604,"length1":24,"length2":31}]}]},{"timestamp":1742480943659,"editorVersion":"7.0.57","changes":[{"type":"edited","filename":"main.ts","patch":[{"diffs":[[0,"en()\n       "],[-1,"\n"],[1," \n        \n "],[0,"       radio"]],"start1":1851,"start2":1851,"length1":25,"length2":36}]}]},{"timestamp":1742482637579,"editorVersion":"7.0.57","changes":[{"type":"edited","filename":"main.ts","patch":[{"diffs":[[0,"earScreen()\n"],[1,"       \n"],[0,"       radio"]],"start1":1844,"start2":1844,"length1":24,"length2":32}]}]},{"timestamp":1742482639379,"editorVersion":"7.0.57","changes":[{"type":"edited","filename":"main.ts","patch":[{"diffs":[[0,"  }\n"],[-1,"        basic.pause(randint(0,1000))\n"],[0,"    "]],"start1":574,"start2":574,"length1":45,"length2":8},{"diffs":[[0,"ng(msg => {\n"],[1,"        count++\n        basic.showNumber(count)\n        return\n        led.plot(1,1)\n "],[0,"       if(ms"]],"start1":1920,"start2":1920,"length1":24,"length2":110},{"diffs":[[0,"turn;\n        }\n"],[1,"        basic.showIcon(IconNames.Cow)\n"],[0,"        const po"]],"start1":2231,"start2":2231,"length1":32,"length2":70}]}]},{"timestamp":1742483221291,"editorVersion":"7.0.57","changes":[{"type":"edited","filename":"main.ts","patch":[{"diffs":[[0,"ber[]){\n    "],[-1,"//"],[0,"basic.showIc"]],"start1":1098,"start2":1098,"length1":26,"length2":24},{"diffs":[[0,") + 128\n"],[1,"        //basic.showNumber(signal)\n"],[0,"        "]],"start1":2296,"start2":2296,"length1":16,"length2":51},{"diffs":[[0,"        "],[-1,"showReception"],[1,"basic.showNumber"],[0,"(strengt"]],"start1":2377,"start2":2377,"length1":29,"length2":32},{"diffs":[[0,"\n}\n\n"],[-1,"function showReception(value: number){\n    basic.clearScreen();\n    led.plot(0,0)\n    if(value > 1){\n        led.plot(1,0)\n    }\n    if (value > 2) {\n        led.plot(2, 0)\n    }\n}\n\n"],[0,"clas"]],"start1":2536,"start2":2536,"length1":190,"length2":8}]}]},{"timestamp":1742483638966,"editorVersion":"7.0.57","changes":[{"type":"edited","filename":"main.ts","patch":[{"diffs":[[0,"use("],[-1,"position*150"],[1,"randint(0,1000)"],[0,")\n  "]],"start1":594,"start2":594,"length1":20,"length2":23}]}]},{"timestamp":1742495040458,"editorVersion":"7.0.57","changes":[{"type":"edited","filename":"pxt.json","patch":[{"diffs":[[0," ],\n"],[-1,"    \"testFiles\": [\n        \"test.ts\"\n    ],\n"],[0,"    "]],"start1":210,"start2":210,"length1":52,"length2":8}]},{"type":"added","filename":"test.ts","value":"// les tests vont ici ; cela ne sera pas compilé si ce paquet est utilisé en tant qu'extension.\n"},{"type":"added","filename":"main.blocks","value":"<xml xmlns=\"http://www.w3.org/1999/xhtml\">\n  <block type=\"pxt-on-start\"></block>\n  <block type=\"device_forever\"></block>\n</xml>"}]}],"snapshots":[{"timestamp":1742241079817,"editorVersion":"7.0.57","text":{"main.ts":"\n","README.md":"","pxt.json":"{\n    \"name\": \"radar position\",\n    \"description\": \"\",\n    \"dependencies\": {\n        \"core\": \"*\",\n        \"radio\": \"*\",\n        \"microphone\": \"*\"\n    },\n    \"files\": [\n        \"main.ts\",\n        \"README.md\"\n    ],\n    \"preferredEditor\": \"tsprj\",\n    \"languageRestriction\": \"javascript-only\",\n    \"additionalFilePaths\": []\n}\n"}},{"timestamp":1742253417733,"editorVersion":"7.0.57","text":{"main.ts":"// Two cases : bound for position or client who searching position\n\nfunction ConfigureBoundary(position: number){\n    basic.clearScreen()\n    radio.setGroup(1);\n    radio.setTransmitSerialNumber(true)\n    input.onButtonPressed(Button.A,()=>{})\n    input.onButtonPressed(Button.B, () => { })\n    radio.onReceivedString(msg => {\n        const id = radio.receivedPacket(1);\n        radio.sendString(`ACK:${id}`)\n        basic.showIcon(IconNames.SmallSquare)\n        basic.showIcon(IconNames.Square)\n        basic.showIcon(IconNames.SmallSquare)\n        basic.pause(300)\n        basic.clearScreen()\n    })\n}\n\nfunction ConfigureClient(){\n    radio.setGroup(1)\n    radio.setTransmitSerialNumber(true)\n    input.onButtonPressed(Button.A,()=> {\n        radio.sendString(\"value\")\n    });\n\n    radio.onReceivedString(msg => {\n        \n        console.log(`Message ${msg}`)\n        console.log(`Response ${radio.receivedPacket(1)}`)\n    })\n}\n\nclass Configuration {\n    constructor(private isBoundary: boolean = true) {\n        new KindConfig((isBoundary: boolean) => this.finishConfig(isBoundary));\n    }\n    finishConfig(isBoundary: boolean) {\n        this.isBoundary = isBoundary;\n        if(this.isBoundary){\n            new ChooseBoundaryPosition((position: number) => ConfigureBoundary(position));\n        }else{\n            ConfigureClient();\n        }   \n    }\n}\n\nclass KindConfig {\n    constructor(next: (isBoudary: boolean) => void, private isBoundary: boolean = true) {\n        input.onButtonPressed(Button.A, () => this.changeKind());\n        input.onButtonPressed(Button.B, () => next(this.isBoundary));\n        this.show();\n    }\n    changeKind() {\n        this.isBoundary = !this.isBoundary;\n        this.show();\n    }\n    show() {\n        if(this.isBoundary){\n            basic.showIcon(IconNames.Square)\n        }else{\n            basic.clearScreen()\n            led.plot(2,2)\n        }\n    }\n}\n\nclass ChooseBoundaryPosition {\n    constructor(next: (position: number) => void, private position: number= 0) {\n        input.onButtonPressed(Button.A, () => this.changePosition());\n        input.onButtonPressed(Button.B, () => next(this.position));\n        this.show();\n    }\n    changePosition() {\n        this.position = (this.position+1)%4;\n        this.show();\n    }\n    show() {\n        basic.clearScreen();\n        switch(this.position){\n            case 0: showBlock(0,0);break;\n            case 1: showBlock(3, 0); break;\n            case 2: showBlock(3, 3); break;\n            case 3: showBlock(0, 3); break;\n        }\n    }\n}\n\nfunction showBlock(x:number, y:number){\n    led.plot(x,y)\n    led.plot(x, y+1)\n    led.plot(x+1, y)\n    led.plot(x + 1, y+1)\n}\n\nnew Configuration()","README.md":"","pxt.json":"{\n    \"name\": \"radar position\",\n    \"description\": \"\",\n    \"dependencies\": {\n        \"core\": \"*\",\n        \"radio\": \"*\",\n        \"microphone\": \"*\"\n    },\n    \"files\": [\n        \"main.ts\",\n        \"README.md\"\n    ],\n    \"preferredEditor\": \"tsprj\",\n    \"languageRestriction\": \"javascript-only\"\n}\n"}},{"timestamp":1742389803595,"editorVersion":"7.0.57","text":{"main.ts":"// Two cases : bound for position or client who searching position\n\nfunction ConfigureBoundary(position: number){\n    basic.clearScreen()\n    radio.setGroup(1);\n    radio.setTransmitSerialNumber(true)\n    input.onButtonPressed(Button.A,()=>{})\n    input.onButtonPressed(Button.B, () => { })\n    radio.onReceivedString(msg => {\n        const id = radio.receivedPacket(1);\n        radio.sendString(`ACK:${id}:${position}`)\n        basic.showIcon(IconNames.SmallSquare)\n        basic.showIcon(IconNames.Square)\n        basic.showIcon(IconNames.SmallSquare)\n        basic.pause(300)\n        basic.clearScreen()\n    })\n}\n\nfunction ConfigureClient(){\n    radio.setGroup(1)\n    radio.setTransmitSerialNumber(true)\n    let strengths = [0,0,0,0]\n    input.onButtonPressed(Button.A,()=> {\n        strengths = [0, 0, 0, 0]\n        radio.sendString(\"value\")\n    });\n\n    radio.onReceivedString(msg => {\n        if(msg.indexOf(\"ACK:\") === 0){\n            const id = parseInt(msg.split(\":\")[1])\n            if (id !== control.deviceSerialNumber()){\n                return;\n            }\n        }\n        const position = parseInt(msg.split(\":\")[2])\n        const signal = radio.receivedPacket(2) + 128\n        basic.showNumber(signal)\n        strengths[position] = signal;\n        if(!strengths.some(v=>v===0)){\n            //show graphic\n        }\n    })\n}\n\nclass Configuration {\n    constructor(private isBoundary: boolean = true) {\n        new KindConfig((isBoundary: boolean) => this.finishConfig(isBoundary));\n    }\n    finishConfig(isBoundary: boolean) {\n        this.isBoundary = isBoundary;\n        if(this.isBoundary){\n            new ChooseBoundaryPosition((position: number) => ConfigureBoundary(position));\n        }else{\n            ConfigureClient();\n        }   \n    }\n}\n\nclass KindConfig {\n    constructor(next: (isBoudary: boolean) => void, private isBoundary: boolean = true) {\n        input.onButtonPressed(Button.A, () => this.changeKind());\n        input.onButtonPressed(Button.B, () => next(this.isBoundary));\n        this.show();\n    }\n    changeKind() {\n        this.isBoundary = !this.isBoundary;\n        this.show();\n    }\n    show() {\n        if(this.isBoundary){\n            basic.showIcon(IconNames.Square)\n        }else{\n            basic.clearScreen()\n            led.plot(2,2)\n        }\n    }\n}\n\nclass ChooseBoundaryPosition {\n    constructor(next: (position: number) => void, private position: number= 0) {\n        input.onButtonPressed(Button.A, () => this.changePosition());\n        input.onButtonPressed(Button.B, () => next(this.position));\n        this.show();\n    }\n    changePosition() {\n        this.position = (this.position+1)%4;\n        this.show();\n    }\n    show() {\n        basic.clearScreen();\n        switch(this.position){\n            case 0: showBlock(0,0);break;\n            case 1: showBlock(3, 0); break;\n            case 2: showBlock(3, 3); break;\n            case 3: showBlock(0, 3); break;\n        }\n    }\n}\n\nfunction showBlock(x:number, y:number){\n    led.plot(x,y)\n    led.plot(x, y+1)\n    led.plot(x+1, y)\n    led.plot(x + 1, y+1)\n}\n\nnew Configuration()","README.md":"","pxt.json":"{\n    \"name\": \"radar position\",\n    \"description\": \"\",\n    \"dependencies\": {\n        \"core\": \"*\",\n        \"radio\": \"*\",\n        \"microphone\": \"*\"\n    },\n    \"files\": [\n        \"main.ts\",\n        \"README.md\"\n    ],\n    \"preferredEditor\": \"tsprj\",\n    \"languageRestriction\": \"javascript-only\"\n}\n"}},{"timestamp":1742418630284,"editorVersion":"7.0.57","text":{"main.ts":"// Two cases : bound for position or client who searching position\n\nfunction ConfigureBoundary(position: number){\n    basic.clearScreen()\n    radio.setGroup(1);\n    led.setBrightness(255)\n    radio.setTransmitSerialNumber(true)\n    \n    let transmitPower = 6;\n    input.onButtonPressed(Button.A,()=>{\n        transmitPower = (transmitPower+1)%8\n        radio.setTransmitPower(transmitPower)\n        basic.showNumber(transmitPower)\n    })\n    input.onButtonPressed(Button.B, () => { })\n    radio.onReceivedString(msg => {\n        const id = radio.receivedPacket(1);\n        radio.sendString(`ACK:${id}:${position}`)\n        basic.showIcon(IconNames.SmallSquare)\n        basic.showIcon(IconNames.Square)\n        basic.showIcon(IconNames.SmallSquare)\n        basic.pause(300)\n        basic.clearScreen()\n    })\n}\n\nfunction computePosition(){\n    basic.showIcon(IconNames.Rollerskate)\n    const longDistance = Math.sqrt(2) * 4\n    // Transform power to relative distance. 100 is distance 0, 50 is half, 20 is long (arbiatrary)\n    const dA = \n    // Resolve equation\n\n}\n\nfunction ConfigureClient(){\n    radio.setGroup(1)\n    radio.setTransmitSerialNumber(true)\n    led.setBrightness(255)\n    let strengths = [0,0,0,0]\n    input.onButtonPressed(Button.A,()=> {\n        strengths = [0, 0, 0, 0]\n        radio.sendString(\"value\")\n    });\n\n    radio.onReceivedString(msg => {\n        if(msg.indexOf(\"ACK:\") === 0){\n            const id = parseInt(msg.split(\":\")[1])\n            if (id !== control.deviceSerialNumber()){\n                return;\n            }\n        }\n        const position = parseInt(msg.split(\":\")[2])\n        const signal = radio.receivedPacket(2) + 128\n        basic.showNumber(signal)\n        strengths[position] = signal;\n        if(!strengths.some(v=>v===0)){\n            //show graphic\n        }\n    })\n}\n\nclass Configuration {\n    constructor(private isBoundary: boolean = true) {\n        new KindConfig((isBoundary: boolean) => this.finishConfig(isBoundary));\n    }\n    finishConfig(isBoundary: boolean) {\n        this.isBoundary = isBoundary;\n        if(this.isBoundary){\n            new ChooseBoundaryPosition((position: number) => ConfigureBoundary(position));\n        }else{\n            ConfigureClient();\n        }   \n    }\n}\n\nclass KindConfig {\n    constructor(next: (isBoudary: boolean) => void, private isBoundary: boolean = true) {\n        input.onButtonPressed(Button.A, () => this.changeKind());\n        input.onButtonPressed(Button.B, () => next(this.isBoundary));\n        this.show();\n    }\n    changeKind() {\n        this.isBoundary = !this.isBoundary;\n        this.show();\n    }\n    show() {\n        if(this.isBoundary){\n            basic.showIcon(IconNames.Square)\n        }else{\n            basic.clearScreen()\n            led.plot(2,2)\n        }\n    }\n}\n\nclass ChooseBoundaryPosition {\n    constructor(next: (position: number) => void, private position: number= 0) {\n        input.onButtonPressed(Button.A, () => this.changePosition());\n        input.onButtonPressed(Button.B, () => next(this.position));\n        this.show();\n    }\n    changePosition() {\n        this.position = (this.position+1)%3;\n        this.show();\n    }\n    show() {\n        basic.clearScreen();\n        switch(this.position){\n            case 0: showBlock(0,0);break;\n            case 1: showBlock(3, 0); break;\n            //case 2: showBlock(3, 3); break;\n            case 2: showBlock(0, 3); break;\n        }\n    }\n}\n\nfunction showBlock(x:number, y:number){\n    led.plot(x,y)\n    led.plot(x, y+1)\n    led.plot(x+1, y)\n    led.plot(x + 1, y+1)\n}\n\nnew Configuration()","README.md":"","pxt.json":"{\n    \"name\": \"radar position\",\n    \"description\": \"\",\n    \"dependencies\": {\n        \"core\": \"*\",\n        \"radio\": \"*\",\n        \"microphone\": \"*\"\n    },\n    \"files\": [\n        \"main.ts\",\n        \"README.md\"\n    ],\n    \"preferredEditor\": \"tsprj\",\n    \"languageRestriction\": \"javascript-only\"\n}\n"}},{"timestamp":1742427040459,"editorVersion":"7.0.57","text":{"main.ts":"// Two cases : bound for position or client who searching position\n\nfunction ConfigureBoundary(position: number){\n    basic.clearScreen()\n    radio.setGroup(1);\n    led.setBrightness(255)\n    radio.setTransmitSerialNumber(true)\n    \n    let transmitPower = 6;\n    input.onButtonPressed(Button.A,()=>{\n        transmitPower = (transmitPower+1)%8\n        radio.setTransmitPower(transmitPower)\n        basic.showNumber(transmitPower)\n    })\n    input.onButtonPressed(Button.B, () => { })\n    radio.onReceivedString(msg => {\n        const id = radio.receivedPacket(1);\n        radio.sendString(`ACK:${id}:${position}`)\n        basic.showIcon(IconNames.SmallSquare)\n        basic.showIcon(IconNames.Square)\n        basic.showIcon(IconNames.SmallSquare)\n        basic.pause(300)\n        basic.clearScreen()\n    })\n}\n\nfunction computePosition(strengths: number[]){\n    basic.showIcon(IconNames.Rollerskate)\n    const longDistance = Math.sqrt(2) * 4\n    // Transform power to relative distance. 100 is distance 0, 50 is half, 20 is long (arbiatrary)\n    // Affine function y = x (-√2/20) + 5√2\n    const dA = strengths[0] * (Math.sqrt(2)/-20) + 5 * Math.sqrt(2)\n    // Resolve equation\n\n}\n\nfunction ConfigureClient(){\n    radio.setGroup(1)\n    radio.setTransmitSerialNumber(true)\n    led.setBrightness(255)\n    let strengths = [0,0,0,0]\n    input.onButtonPressed(Button.A,()=> {\n        strengths = [0, 0, 0, 0]\n        radio.sendString(\"value\")\n    });\n\n    radio.onReceivedString(msg => {\n        if(msg.indexOf(\"ACK:\") === 0){\n            const id = parseInt(msg.split(\":\")[1])\n            if (id !== control.deviceSerialNumber()){\n                return;\n            }\n        }\n        const position = parseInt(msg.split(\":\")[2])\n        const signal = radio.receivedPacket(2) + 128\n        basic.showNumber(signal)\n        strengths[position] = signal;\n        if(!strengths.some(v=>v===0)){\n            //show graphic\n        }\n    })\n}\n\nclass Configuration {\n    constructor(private isBoundary: boolean = true) {\n        new KindConfig((isBoundary: boolean) => this.finishConfig(isBoundary));\n    }\n    finishConfig(isBoundary: boolean) {\n        this.isBoundary = isBoundary;\n        if(this.isBoundary){\n            new ChooseBoundaryPosition((position: number) => ConfigureBoundary(position));\n        }else{\n            ConfigureClient();\n        }   \n    }\n}\n\nclass KindConfig {\n    constructor(next: (isBoudary: boolean) => void, private isBoundary: boolean = true) {\n        input.onButtonPressed(Button.A, () => this.changeKind());\n        input.onButtonPressed(Button.B, () => next(this.isBoundary));\n        this.show();\n    }\n    changeKind() {\n        this.isBoundary = !this.isBoundary;\n        this.show();\n    }\n    show() {\n        if(this.isBoundary){\n            basic.showIcon(IconNames.Square)\n        }else{\n            basic.clearScreen()\n            led.plot(2,2)\n        }\n    }\n}\n\nclass ChooseBoundaryPosition {\n    constructor(next: (position: number) => void, private position: number= 0) {\n        input.onButtonPressed(Button.A, () => this.changePosition());\n        input.onButtonPressed(Button.B, () => next(this.position));\n        this.show();\n    }\n    changePosition() {\n        this.position = (this.position+1)%3;\n        this.show();\n    }\n    show() {\n        basic.clearScreen();\n        switch(this.position){\n            case 0: showBlock(0,0);break;\n            case 1: showBlock(3, 0); break;\n            //case 2: showBlock(3, 3); break;\n            case 2: showBlock(0, 3); break;\n        }\n    }\n}\n\nfunction showBlock(x:number, y:number){\n    led.plot(x,y)\n    led.plot(x, y+1)\n    led.plot(x+1, y)\n    led.plot(x + 1, y+1)\n}\n\nnew Configuration()","README.md":"","pxt.json":"{\n    \"name\": \"radar position\",\n    \"description\": \"\",\n    \"dependencies\": {\n        \"core\": \"*\",\n        \"radio\": \"*\",\n        \"microphone\": \"*\"\n    },\n    \"files\": [\n        \"main.ts\",\n        \"README.md\"\n    ],\n    \"preferredEditor\": \"tsprj\",\n    \"languageRestriction\": \"javascript-only\"\n}\n"}},{"timestamp":1742477236958,"editorVersion":"7.0.57","text":{"main.ts":"// Two cases : bound for position or client who searching position\n\nfunction ConfigureBoundary(position: number){\n    basic.clearScreen()\n    radio.setGroup(1);\n    led.setBrightness(255)\n    radio.setTransmitSerialNumber(true)\n    \n    let transmitPower = 6;\n    input.onButtonPressed(Button.A,()=>{\n        transmitPower = (transmitPower+1)%8\n        radio.setTransmitPower(transmitPower)\n        basic.showNumber(transmitPower)\n    })\n    input.onButtonPressed(Button.B, () => { })\n    radio.onReceivedString(msg => {\n        const id = radio.receivedPacket(1);\n        radio.sendString(`ACK:${id}:${position}`)\n        basic.showIcon(IconNames.SmallSquare)\n        basic.showIcon(IconNames.Square)\n        basic.showIcon(IconNames.SmallSquare)\n        basic.pause(300)\n        basic.clearScreen()\n    })\n}\n\nfunction transformPower(value: number):number{\n    // Affine function y = x (-√2/20) + 5√2\n    return value * (Math.sqrt(2) / -20) + 5 * Math.sqrt(2);\n}\n\nfunction computePosition(strengths: number[]){\n    basic.showIcon(IconNames.Rollerskate)\n    const longDistance = Math.sqrt(2) * 4\n    // Transform power to relative distance. 100 is distance 0, 50 is half, 20 is long (arbiatrary)\n    const dA = transformPower(strengths[0]);\n    const dB = transformPower(strengths[1]);\n    const dC = transformPower(strengths[2]);\n    // Resolve equation\n    const y = Math.sqrt(dA*dA - Math.pow((dA*dA - dB*dB + 16)/8,2))\n    const x = Math.sqrt(dA*dA - y*y)\n    basic.clearScreen()\n    led.plot(x,y)\n}\n\nfunction ConfigureClient(){\n    radio.setGroup(1)\n    radio.setTransmitSerialNumber(true)\n    led.setBrightness(255)\n    let strengths = [0,0,0]\n    input.onButtonPressed(Button.A,()=> {\n        strengths = [0, 0, 0]\n        radio.sendString(\"value\")\n    });\n\n    radio.onReceivedString(msg => {\n        if(msg.indexOf(\"ACK:\") === 0){\n            const id = parseInt(msg.split(\":\")[1])\n            if (id !== control.deviceSerialNumber()){\n                return;\n            }\n        }\n        const position = parseInt(msg.split(\":\")[2])\n        const signal = radio.receivedPacket(2) + 128\n        basic.showNumber(signal)\n        strengths[position] = signal;\n        if(!strengths.some(v=>v===0)){\n            computePosition(strengths);\n        }\n    })\n}\n\nclass Configuration {\n    constructor(private isBoundary: boolean = true) {\n        new KindConfig((isBoundary: boolean) => this.finishConfig(isBoundary));\n    }\n    finishConfig(isBoundary: boolean) {\n        this.isBoundary = isBoundary;\n        if(this.isBoundary){\n            new ChooseBoundaryPosition((position: number) => ConfigureBoundary(position));\n        }else{\n            ConfigureClient();\n        }   \n    }\n}\n\nclass KindConfig {\n    constructor(next: (isBoudary: boolean) => void, private isBoundary: boolean = true) {\n        input.onButtonPressed(Button.A, () => this.changeKind());\n        input.onButtonPressed(Button.B, () => next(this.isBoundary));\n        this.show();\n    }\n    changeKind() {\n        this.isBoundary = !this.isBoundary;\n        this.show();\n    }\n    show() {\n        if(this.isBoundary){\n            basic.showIcon(IconNames.Square)\n        }else{\n            basic.clearScreen()\n            led.plot(2,2)\n        }\n    }\n}\n\nclass ChooseBoundaryPosition {\n    constructor(next: (position: number) => void, private position: number= 0) {\n        input.onButtonPressed(Button.A, () => this.changePosition());\n        input.onButtonPressed(Button.B, () => next(this.position));\n        this.show();\n    }\n    changePosition() {\n        this.position = (this.position+1)%3;\n        this.show();\n    }\n    show() {\n        basic.clearScreen();\n        switch(this.position){\n            case 0: showBlock(0,0);break;\n            case 1: showBlock(3, 0); break;\n            //case 2: showBlock(3, 3); break;\n            case 2: showBlock(0, 3); break;\n        }\n    }\n}\n\nfunction showBlock(x:number, y:number){\n    led.plot(x,y)\n    led.plot(x, y+1)\n    led.plot(x+1, y)\n    led.plot(x + 1, y+1)\n}\n\nnew Configuration()","README.md":"","pxt.json":"{\n    \"name\": \"radar position\",\n    \"description\": \"\",\n    \"dependencies\": {\n        \"core\": \"*\",\n        \"radio\": \"*\",\n        \"microphone\": \"*\"\n    },\n    \"files\": [\n        \"main.ts\",\n        \"README.md\"\n    ],\n    \"preferredEditor\": \"tsprj\",\n    \"languageRestriction\": \"javascript-only\"\n}\n"}},{"timestamp":1742480942045,"editorVersion":"7.0.57","text":{"main.ts":"// Two cases : bound for position or client who searching position\n\nfunction ConfigureBoundary(position: number){\n    basic.clearScreen()\n    radio.setGroup(1);\n    led.setBrightness(255)\n    radio.setTransmitSerialNumber(true)\n    \n    let transmitPower = 6;\n    input.onButtonPressed(Button.A,()=>{\n        transmitPower = (transmitPower+1)%8\n        radio.setTransmitPower(transmitPower)\n        basic.showNumber(transmitPower)\n    })\n    input.onButtonPressed(Button.B, () => { })\n    radio.onReceivedString(msg => {\n        if(msg !== \"REQ\"){\n            return;\n        }\n        const id = radio.receivedPacket(1);\n        radio.sendString(`ACK:${id}:${position}`)\n        basic.showIcon(IconNames.SmallSquare)\n        basic.showIcon(IconNames.Square)\n        basic.showIcon(IconNames.SmallSquare)\n        basic.pause(300)\n        basic.clearScreen()\n    })\n}\n\nfunction transformPower(value: number):number{\n    // Affine function y = x (-√2/20) + 5√2\n    return value * (Math.sqrt(2) / -20) + 5 * Math.sqrt(2);\n}\n\nfunction computePosition(strengths: number[]){\n    basic.showIcon(IconNames.Rollerskate)\n    const longDistance = Math.sqrt(2) * 4\n    // Transform power to relative distance. 100 is distance 0, 50 is half, 20 is long (arbiatrary)\n    const dA = transformPower(strengths[0]);\n    const dB = transformPower(strengths[1]);\n    const dC = transformPower(strengths[2]);\n    // Resolve equation\n    const y = Math.sqrt(dA*dA - Math.pow((dA*dA - dB*dB + 16)/8,2))\n    const x = Math.sqrt(dA*dA - y*y)\n    basic.clearScreen()\n    led.plot(x,y)\n}\n\nfunction ConfigureClient(){\n    radio.setGroup(1)\n    radio.setTransmitSerialNumber(true)\n    led.setBrightness(255)\n    basic.clearScreen()\n    let strengths = [0,0,0]\n    let count = 0\n    input.onButtonPressed(Button.A,()=> {\n        strengths = [0, 0, 0]\n        //basic.clearScreen()\n        \n        \n        radio.sendString(\"REQ\")\n    });\n\n    radio.onReceivedString(msg => {\n        count++\n        basic.showNumber(count)\n        return\n        led.plot(1,1)\n        if(msg.indexOf(\"ACK:\") === 0){\n            const id = parseInt(msg.split(\":\")[1])\n            if (id !== control.deviceSerialNumber()){\n                return;\n            }   \n        }else{\n            return;\n        }\n        basic.showIcon(IconNames.Cow)\n        const position = parseInt(msg.split(\":\")[2])\n        const signal = radio.receivedPacket(2) + 128\n        //basic.showNumber(signal)\n        strengths[position] = signal;\n        basic.showNumber(strengths.filter(v => v !== 0).length)\n        if(!strengths.some(v=>v===0)){\n            computePosition(strengths);\n        }\n    })\n}\n\nclass Configuration {\n    constructor(private isBoundary: boolean = true) {\n        new KindConfig((isBoundary: boolean) => this.finishConfig(isBoundary));\n    }\n    finishConfig(isBoundary: boolean) {\n        this.isBoundary = isBoundary;\n        if(this.isBoundary){\n            new ChooseBoundaryPosition((position: number) => ConfigureBoundary(position));\n        }else{\n            ConfigureClient();\n        }   \n    }\n}\n\nclass KindConfig {\n    constructor(next: (isBoudary: boolean) => void, private isBoundary: boolean = true) {\n        input.onButtonPressed(Button.A, () => this.changeKind());\n        input.onButtonPressed(Button.B, () => next(this.isBoundary));\n        this.show();\n    }\n    changeKind() {\n        this.isBoundary = !this.isBoundary;\n        this.show();\n    }\n    show() {\n        if(this.isBoundary){\n            basic.showIcon(IconNames.Square)\n        }else{\n            basic.clearScreen()\n            led.plot(2,2)\n        }\n    }\n}\n\nclass ChooseBoundaryPosition {\n    constructor(next: (position: number) => void, private position: number= 0) {\n        input.onButtonPressed(Button.A, () => this.changePosition());\n        input.onButtonPressed(Button.B, () => next(this.position));\n        this.show();\n    }\n    changePosition() {\n        this.position = (this.position+1)%3;\n        this.show();\n    }\n    show() {\n        basic.clearScreen();\n        switch(this.position){\n            case 0: showBlock(0,0);break;\n            case 1: showBlock(3, 0); break;\n            //case 2: showBlock(3, 3); break;\n            case 2: showBlock(0, 3); break;\n        }\n    }\n}\n\nfunction showBlock(x:number, y:number){\n    led.plot(x,y)\n    led.plot(x, y+1)\n    led.plot(x+1, y)\n    led.plot(x + 1, y+1)\n}\n\nnew Configuration()","README.md":"","pxt.json":"{\n    \"name\": \"radar position\",\n    \"description\": \"\",\n    \"dependencies\": {\n        \"core\": \"*\",\n        \"radio\": \"*\",\n        \"microphone\": \"*\"\n    },\n    \"files\": [\n        \"main.ts\",\n        \"README.md\"\n    ],\n    \"preferredEditor\": \"tsprj\",\n    \"languageRestriction\": \"javascript-only\"\n}\n"}},{"timestamp":1742482860411,"editorVersion":"7.0.57","text":{"main.ts":"// Two cases : bound for position or client who searching position\n\nfunction ConfigureBoundary(position: number){\n    basic.clearScreen()\n    radio.setGroup(1);\n    led.setBrightness(255)\n    radio.setTransmitSerialNumber(true)\n    \n    let transmitPower = 6;\n    input.onButtonPressed(Button.A,()=>{\n        transmitPower = (transmitPower+1)%8\n        radio.setTransmitPower(transmitPower)\n        basic.showNumber(transmitPower)\n    })\n    input.onButtonPressed(Button.B, () => { })\n    radio.onReceivedString(msg => {\n        if(msg !== \"REQ\"){\n            return;\n        }\n        basic.pause(randint(0,1000))\n        const id = radio.receivedPacket(1);\n        radio.sendString(`ACK:${id}:${position}`)\n        basic.showIcon(IconNames.SmallSquare)\n        basic.showIcon(IconNames.Square)\n        basic.showIcon(IconNames.SmallSquare)\n        basic.pause(300)\n        basic.clearScreen()\n    })\n}\n\nfunction transformPower(value: number):number{\n    // Affine function y = x (-√2/20) + 5√2\n    return value * (Math.sqrt(2) / -20) + 5 * Math.sqrt(2);\n}\n\nfunction computePosition(strengths: number[]){\n    basic.showIcon(IconNames.Rollerskate)\n    const longDistance = Math.sqrt(2) * 4\n    // Transform power to relative distance. 100 is distance 0, 50 is half, 20 is long (arbiatrary)\n    const dA = transformPower(strengths[0]);\n    const dB = transformPower(strengths[1]);\n    const dC = transformPower(strengths[2]);\n    // Resolve equation\n    const y = Math.sqrt(dA*dA - Math.pow((dA*dA - dB*dB + 16)/8,2))\n    const x = Math.sqrt(dA*dA - y*y)\n    basic.clearScreen()\n    led.plot(x,y)\n}\n\nfunction ConfigureClient(){\n    radio.setGroup(1)\n    \n    radio.setTransmitSerialNumber(true)\n    led.setBrightness(255)\n    basic.clearScreen()\n    let strengths = [0,0,0]\n    let count = 0\n    input.onButtonPressed(Button.A,()=> {\n        strengths = [0, 0, 0]\n        //basic.clearScreen()\n       radio.sendString(\"REQ\")\n    });\n\n    radio.onReceivedString(msg => {\n        count++\n        basic.showNumber(count)\n        return\n        led.plot(1,1)\n        if(msg.indexOf(\"ACK:\") === 0){\n            const id = parseInt(msg.split(\":\")[1])\n            if (id !== control.deviceSerialNumber()){\n                return;\n            }   \n        }else{\n            return;\n        }\n        basic.showIcon(IconNames.Cow)\n        const position = parseInt(msg.split(\":\")[2])\n        const signal = radio.receivedPacket(2) + 128\n        //basic.showNumber(signal)\n        strengths[position] = signal;\n        basic.showNumber(strengths.filter(v => v !== 0).length)\n        if(!strengths.some(v=>v===0)){\n            computePosition(strengths);\n        }\n    })\n}\n\nclass Configuration {\n    constructor(private isBoundary: boolean = true) {\n        new KindConfig((isBoundary: boolean) => this.finishConfig(isBoundary));\n    }\n    finishConfig(isBoundary: boolean) {\n        this.isBoundary = isBoundary;\n        if(this.isBoundary){\n            new ChooseBoundaryPosition((position: number) => ConfigureBoundary(position));\n        }else{\n            ConfigureClient();\n        }   \n    }\n}\n\nclass KindConfig {\n    constructor(next: (isBoudary: boolean) => void, private isBoundary: boolean = true) {\n        input.onButtonPressed(Button.A, () => this.changeKind());\n        input.onButtonPressed(Button.B, () => next(this.isBoundary));\n        this.show();\n    }\n    changeKind() {\n        this.isBoundary = !this.isBoundary;\n        this.show();\n    }\n    show() {\n        if(this.isBoundary){\n            basic.showIcon(IconNames.Square)\n        }else{\n            basic.clearScreen()\n            led.plot(2,2)\n        }\n    }\n}\n\nclass ChooseBoundaryPosition {\n    constructor(next: (position: number) => void, private position: number= 0) {\n        input.onButtonPressed(Button.A, () => this.changePosition());\n        input.onButtonPressed(Button.B, () => next(this.position));\n        this.show();\n    }\n    changePosition() {\n        this.position = (this.position+1)%3;\n        this.show();\n    }\n    show() {\n        basic.clearScreen();\n        switch(this.position){\n            case 0: showBlock(0,0);break;\n            case 1: showBlock(3, 0); break;\n            //case 2: showBlock(3, 3); break;\n            case 2: showBlock(0, 3); break;\n        }\n    }\n}\n\nfunction showBlock(x:number, y:number){\n    led.plot(x,y)\n    led.plot(x, y+1)\n    led.plot(x+1, y)\n    led.plot(x + 1, y+1)\n}\n\nnew Configuration()","README.md":"","pxt.json":"{\n    \"name\": \"radar position\",\n    \"description\": \"\",\n    \"dependencies\": {\n        \"core\": \"*\",\n        \"radio\": \"*\",\n        \"microphone\": \"*\"\n    },\n    \"files\": [\n        \"main.ts\",\n        \"README.md\"\n    ],\n    \"preferredEditor\": \"tsprj\",\n    \"languageRestriction\": \"javascript-only\"\n}\n"}},{"timestamp":1742495040458,"editorVersion":"7.0.57","text":{"main.ts":"// Two cases : bound for position or client who searching position\n\nfunction ConfigureBoundary(position: number){\n    basic.clearScreen()\n    radio.setGroup(1);\n    led.setBrightness(255)\n    radio.setTransmitSerialNumber(true)\n    \n    let transmitPower = 6;\n    input.onButtonPressed(Button.A,()=>{\n        transmitPower = (transmitPower+1)%8\n        radio.setTransmitPower(transmitPower)\n        basic.showNumber(transmitPower)\n    })\n    input.onButtonPressed(Button.B, () => { })\n    radio.onReceivedString(msg => {\n        if(msg !== \"REQ\"){\n            return;\n        }\n        basic.pause(position*150)\n        const id = radio.receivedPacket(1);\n        radio.sendString(`ACK:${id}:${position}`)\n        basic.showIcon(IconNames.SmallSquare)\n        basic.showIcon(IconNames.Square)\n        basic.showIcon(IconNames.SmallSquare)\n        basic.pause(300)\n        basic.clearScreen()\n    })\n}\n\nfunction transformPower(value: number):number{\n    // Affine function y = x (-√2/20) + 5√2\n    return value * (Math.sqrt(2) / -20) + 5 * Math.sqrt(2);\n}\n\nfunction computePosition(strengths: number[]){\n    //basic.showIcon(IconNames.Rollerskate)\n    const longDistance = Math.sqrt(2) * 4\n    // Transform power to relative distance. 100 is distance 0, 50 is half, 20 is long (arbiatrary)\n    const dA = transformPower(strengths[0]);\n    const dB = transformPower(strengths[1]);\n    const dC = transformPower(strengths[2]);\n    // Resolve equation\n    const y = Math.sqrt(dA*dA - Math.pow((dA*dA - dB*dB + 16)/8,2))\n    const x = Math.sqrt(dA*dA - y*y)\n    basic.clearScreen()\n    led.plot(x,y)\n}\n\nfunction ConfigureClient(){\n    radio.setGroup(1)\n    \n    radio.setTransmitSerialNumber(true)\n    led.setBrightness(255)\n    basic.clearScreen()\n    let strengths = [0,0,0]\n    let count = 0\n    input.onButtonPressed(Button.A,()=> {\n        strengths = [0, 0, 0]\n        //basic.clearScreen()\n       radio.sendString(\"REQ\")\n    });\n\n    radio.onReceivedString(msg => {\n       if(msg.indexOf(\"ACK:\") === 0){\n            const id = parseInt(msg.split(\":\")[1])\n            if (id !== control.deviceSerialNumber()){\n                return;\n            }   \n        }else{\n            return;\n        }\n        const position = parseInt(msg.split(\":\")[2])\n        const signal = radio.receivedPacket(2) + 128\n        strengths[position] = signal;\n        showReception(strengths.filter(v => v !== 0).length)\n        if(!strengths.some(v=>v===0)){\n            computePosition(strengths);\n        }\n    })\n}\n\nfunction showReception(value: number){\n    basic.clearScreen();\n    led.plot(0,0)\n    if(value > 1){\n        led.plot(1,0)\n    }\n    if (value > 2) {\n        led.plot(2, 0)\n    }\n}\n\nclass Configuration {\n    constructor(private isBoundary: boolean = true) {\n        new KindConfig((isBoundary: boolean) => this.finishConfig(isBoundary));\n    }\n    finishConfig(isBoundary: boolean) {\n        this.isBoundary = isBoundary;\n        if(this.isBoundary){\n            new ChooseBoundaryPosition((position: number) => ConfigureBoundary(position));\n        }else{\n            ConfigureClient();\n        }   \n    }\n}\n\nclass KindConfig {\n    constructor(next: (isBoudary: boolean) => void, private isBoundary: boolean = true) {\n        input.onButtonPressed(Button.A, () => this.changeKind());\n        input.onButtonPressed(Button.B, () => next(this.isBoundary));\n        this.show();\n    }\n    changeKind() {\n        this.isBoundary = !this.isBoundary;\n        this.show();\n    }\n    show() {\n        if(this.isBoundary){\n            basic.showIcon(IconNames.Square)\n        }else{\n            basic.clearScreen()\n            led.plot(2,2)\n        }\n    }\n}\n\nclass ChooseBoundaryPosition {\n    constructor(next: (position: number) => void, private position: number= 0) {\n        input.onButtonPressed(Button.A, () => this.changePosition());\n        input.onButtonPressed(Button.B, () => next(this.position));\n        this.show();\n    }\n    changePosition() {\n        this.position = (this.position+1)%3;\n        this.show();\n    }\n    show() {\n        basic.clearScreen();\n        switch(this.position){\n            case 0: showBlock(0,0);break;\n            case 1: showBlock(3, 0); break;\n            //case 2: showBlock(3, 3); break;\n            case 2: showBlock(0, 3); break;\n        }\n    }\n}\n\nfunction showBlock(x:number, y:number){\n    led.plot(x,y)\n    led.plot(x, y+1)\n    led.plot(x+1, y)\n    led.plot(x + 1, y+1)\n}\n\nnew Configuration()","README.md":"","pxt.json":"{\n    \"name\": \"radar position\",\n    \"description\": \"\",\n    \"dependencies\": {\n        \"core\": \"*\",\n        \"radio\": \"*\",\n        \"microphone\": \"*\"\n    },\n    \"files\": [\n        \"main.ts\",\n        \"README.md\"\n    ],\n    \"preferredEditor\": \"tsprj\",\n    \"languageRestriction\": \"javascript-only\"\n}\n"}}],"shares":[],"lastSaveTime":1742495040481}